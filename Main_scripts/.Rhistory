combNorm3 <- combNorm2 %>%
group_by(s, sens, pgroup, trialtype, E, node3) #%>% # guess it's ok to not have .drop=F
View(combNorm3)
combNorm3 <- combNorm2 %>%
group_by(s, sens, pgroup, trialtype, E, node3) %>%
summarise(n=n())# guess it's ok to not have .drop=F
View(combNorm3)
?group_split
combNorm3 <- combNorm2 %>%
group_by(s, sens) %>% # , pgroup, trialtype, E, node3
group_split() # guess it's ok to not have .drop=F
View(combNorm3)
combNorm3[[1]]
test <- combNorm2 %>% group_split(s, sens)
test[[1]]
combNorm3 <- combNorm2 %>%
group_split(s, sens) %>%
mutate(nll = log(cesm)*n)
combNorm3 <- lapply(combNorm3, function(tbl) {
tbl %>% mutate(nll = log(cesm)*n)
})
combNorm3[[1]]
test <- combNorm3[[1]]
View(test)
combNorm3 <- combNorm2 %>%
group_split(s, sens) #%>%
combNorm3 <- lapply(combNorm3, function(tbl) {
tbl %>%
mutate(nll = log(cesm)*n) %>%
filter(cesm!=c(0,NA,NaN)) %>%
mutate(exp = exp(sum(nll)))
})
test <- combNorm3[[1]]
View(test)
combNorm3 <- combNorm2 %>%
group_split(s, sens) #%>%
combNorm3[[8]]
combNorm3 <- lapply(combNorm3, function(tbl) {
tbl %>%
mutate(nll = log(cesm)*n)
})
combNorm3[[252]]
test <- combNorm3[[252]]
View(test)
combNorm3 <- combNorm2 %>%
group_split(s, sens) #%>% 252 elements, ie 12 s values x 21 sensitivity values
test <- combNorm3[[252]]
View(test)
test <- combNorm2 %>% filter(s==0.7, sens==0.2)
View(modelPlaceholder)
View(dataNorm)
# ----------- 3. The actual merge! ------------
# 576 of 7 -- CLOSEST THING TO SINGLE PREDICTION PER NODE/EXPLANATION
combNorm <- merge(x=dataNorm, y=modelNorm) %>%
select(-wa, -n) %>% # Probably don't remove - need for lik
rename(cesm=normed, ppts=prop) %>%
pivot_longer(cols = cesm:ppts, values_to = 'percent')
View(combNorm)
# One for the scatter plots: a bit wider
combNorm2 <- merge(x=dataNorm, y=modelNorm, by = c('pgroup', 'trialtype', 'node3')) %>%
#select(-wa, -n) %>%
rename(cesm=normed, ppts=prop) %>%
filter(isPerm==TRUE)
View(combNorm2)
View(dataNorm)
combNorm4 <- merge(x=modelNorm, y=dataNorm) %>%
#select(-wa, -n) %>%
rename(cesm=normed, ppts=prop) %>%
filter(isPerm==TRUE)
View(combNorm4)
View(modelNorm)
View(test)
View(combNorm4)
# The merge filters for permissable answers and so misses out all the zeroes
combNorm2 <- merge(x=dataNorm, y=modelNorm) %>%
#select(-wa, -n) %>%
rename(cesm=normed, ppts=prop) %>%
filter(isPerm==TRUE)
combNorm3 <- lapply(combNorm3, function(tbl) {
tbl %>%
mutate(nll = log(cesm)*n) %>%
filter(cesm!=c(0,NA,NaN)) %>%
exp(sum(nll))
})
combNorm3 <- combNorm2 %>%
group_split(s, sens) #%>% 252 elements, ie 12 s values x 21 sensitivity values
combNorm3 <- lapply(combNorm3, function(tbl) {
tbl %>%
mutate(nll = log(cesm)*n) %>%
filter(cesm!=c(0,NA,NaN)) %>%
exp(sum(nll))
})
combNorm3 <- lapply(combNorm3, function(tbl) {
tbl %>%
mutate(nll = log(cesm)*n) %>%
filter(cesm!=c(0,NA,NaN)) %>%
mutate(exp = exp(sum(nll)))
})
test <- combNorm3[[1]]
View(test)
combNorm3 <- combNorm2 %>%
group_split(s, sens) #%>% 252 elements, ie 12 s values x 21 sensitivity values
combNorm3 <- lapply(combNorm3, function(tbl) {
tbl %>%
mutate(nll = log(cesm)*n)
})
test <- combNorm3[[1]]
View(test)
nlls <- lapply(combNorm3, function(tbl) {
tbl %>%
sum(nll)
})
nlls <- lapply(combNorm3, function() {
sum(nll)
})
x <- sum(nll)
sum(x$nll)
nlls <- sapply(seq_along(combNorm3, function(x) {
?seq_along
nll_sums <- sapply(seq_along(combNorm3, function(x) {
sum(combNorm3[[x]]$nll, na.rm=T)
}))
nll_sums <- sapply(combNorm3, function(i) {
sum(combNorm3[[i]]$nll, na.rm=T)
})
sum(combNorm3[[1]]$nll)
nll_sums <- sapply(combNorm3, function(i) {
sum(combNorm3[[i]]$nll)
})
nll_sums <- sapply(combNorm3, function(i) {
sum(unlist(combNorm3[[i]]$nll))
})
nll_sums <- sapply(combNorm3, function(i) {
sum(combNorm3[i]$nll)
})
nll_sums <- sapply(combNorm3, function(i) {
sum(combNorm3[[unlist(i)]]$nll)
})
nll_sums <- sapply(seq_along(combNorm3), function(i) {
sum(combNorm3[[i]]$nll)
})
names(nll_sums) <- paste0("tibble_", seq_along(combNorm3))
nll_sums[[1]]
nll_sums[1]
nll_sums2 <- sapply(combNorm3, function(tbl) {
sum(tbl$nll, na.rm = TRUE)
})
names(nll_sums) <- sapply(combNorm3, function(tbl) {
paste("s", unique(tbl$s), "sens", unique(tbl$sens), sep = "_")
})
nll_sums_tibble <- tibble(
tibble_name = names(nll_sums),
nll_sum = nll_sums
)
View(nll_sums_tibble)
# First, let's extract the 's' and 'sens' values from the names
nll_sums_tibble <- tibble(
tibble_name = names(nll_sums),
nll_sum = nll_sums
) %>%
separate(tibble_name, into = c("s_prefix", "s", "sens_prefix", "sens"), sep = "_") %>%
select(s, sens, nll_sum) %>%
mutate(s = as.numeric(s),
sens = as.numeric(sens))
View(nll_sums_tibble)
p1 <- ggplot(nll_sums_tibble, aes(x = s, y = sens, fill = nll_sum)) +
geom_tile() +
geom_text(aes(label = round(nll_sum, 2)), color = "white") +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Heatmap of 'nll' Sums",
x = "s",
y = "sens",
fill = "Sum of nll") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p1
p2 <- ggplot(nll_sums_tibble, aes(x = s, y = sens, fill = nll_sum)) +
geom_tile() +
scale_fill_viridis_c() +  # This gives a nice color gradient
theme_minimal() +
labs(title = "Heatmap of 'nll' Sums",
x = "s",
y = "sens",
fill = "Sum of nll") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p2
p2 <- ggplot(nll_sums_tibble, aes(x = s, y = sens, fill = nll_sum)) +
geom_tile() +
geom_text(aes(label = ifelse(row_number() %% 2 == 0, round(nll_sum, 2), "")),
color = "white", size = 3) +
scale_fill_viridis_c(option = "plasma") +
theme_minimal() +
labs(title = "Heatmap of 'nll' Sums",
x = "s",
y = "sens",
fill = "Sum of nll")
p2
rlang::last_trace()
p2 <- ggplot(nll_sums_tibble, aes(x = s, y = sens, fill = nll_sum)) +
geom_tile() +
geom_text(aes(label = ifelse(row_number %% 2 == 0, round(nll_sum, 2), "")),
color = "white", size = 3) +
scale_fill_viridis_c(option = "plasma") +
theme_minimal() +
labs(title = "Heatmap of 'nll' Sums",
x = "s",
y = "sens",
fill = "Sum of nll")
p2
p2 <- ggplot(nll_sums_tibble, aes(x = s, y = sens, fill = nll_sum)) +
geom_tile() +
geom_text(data = nll_sums_tibble %>% mutate(row_id = row_number()) %>% filter(row_id %% 2 == 0),
aes(label = round(nll_sum, 2)),
color = "white", size = 3) +
scale_fill_viridis_c(option = "plasma") +
theme_minimal() +
labs(title = "Heatmap of 'nll' Sums",
x = "s",
y = "sens",
fill = "Sum of nll")
p2
p2 <- ggplot(nll_sums_tibble, aes(x = s, y = sens, fill = nll_sum)) +
geom_tile(width = 0.9, height = 0.9) +
geom_text(data = nll_sums_tibble %>%
mutate(row_id = row_number()) %>%
filter(row_id %% 5 == 0),
aes(label = round(nll_sum, 2)),
color = "white", size = 3) +
scale_fill_gradientn(colours = c("white", "yellow", "orange", "red"),
values = scales::rescale(c(min(nll_sums_tibble$nll_sum),
median(nll_sums_tibble$nll_sum),
max(nll_sums_tibble$nll_sum)))) +
theme_minimal() +
labs(title = "Heatmap of 'nll' Sums",
x = "s",
y = "sens",
fill = "Sum of nll") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_fixed(ratio = 1)
p2 <- ggplot(nll_sums_tibble, aes(x = s, y = sens, fill = nll_sum)) +
geom_tile(width = 0.9, height = 0.9) +
geom_text(data = nll_sums_tibble %>%
mutate(row_id = row_number()) %>%
filter(row_id %% 5 == 0),
aes(label = round(nll_sum, 2)),
color = "white", size = 3) +
scale_fill_viridis_c(option = "plasma") +  # Use a standard color scale
theme_minimal() +
labs(title = "Heatmap of 'nll' Sums",
x = "s",
y = "sens",
fill = "Sum of nll") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_fixed(ratio = 1)
p2
# First, let's extract the 's' and 'sens' values from the names
nll_sums_tibble <- tibble(
tibble_name = names(nll_sums),
nll_sum = nll_sums
) %>%
separate(tibble_name, into = c("s_prefix", "s", "sens_prefix", "sens"), sep = "_") %>%
select(s, sens, nll_sum) %>%
mutate(s = as.factor(s),
sens = as.factor(sens))
p2 <- ggplot(nll_sums_tibble, aes(x = s, y = sens, fill = nll_sum)) +
geom_tile(width = 0.9, height = 0.9) +
geom_text(data = nll_sums_tibble %>%
mutate(row_id = row_number()) %>%
filter(row_id %% 5 == 0),
aes(label = round(nll_sum, 2)),
color = "white", size = 3) +
scale_fill_viridis_c(option = "plasma") +
theme_minimal() +
labs(title = "Heatmap of 'nll' Sums",
x = "s",
y = "sens",
fill = "Sum of nll") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_fixed(ratio = 1)
p2
View(nll_sums_tibble)
nll_sums_tibble %>% min(nll_sum)
min(nll_sums_tibble$nll_sum)
nll_sums_tibble <- nll_sums_tibble %>%
filter(nll_sum!=c(0,NA,NaN,Inf))
nll_sums_tibble2 <- nll_sums_tibble %>%
filter(nll_sum!=c(0,NA,NaN,Inf))
# First, let's extract the 's' and 'sens' values from the names
nll_sums_tibble <- tibble(
tibble_name = names(nll_sums),
nll_sum = nll_sums
) %>%
separate(tibble_name, into = c("s_prefix", "s", "sens_prefix", "sens"), sep = "_") %>%
select(s, sens, nll_sum) %>%
mutate(s = as.factor(s),
sens = as.factor(sens))
nll_sums_tibble2 <- nll_sums_tibble %>%
filter(nll_sum!=c(0,NA,NaN,Inf))
View(nll_sums_tibble2)
# First, let's extract the 's' and 'sens' values from the names
nll_sums_tibble <- tibble(
tibble_name = names(nll_sums),
nll_sum = nll_sums
) %>%
separate(tibble_name, into = c("s_prefix", "s", "sens_prefix", "sens"), sep = "_") %>%
select(s, sens, nll_sum) %>%
mutate(s = as.factor(s),
sens = as.factor(sens))
nll_sums_tibble2 <- nll_sums_tibble %>%
filter(nll_sum!=c(0,NA,NaN,Inf,-Inf))
u
# First, let's extract the 's' and 'sens' values from the names
nll_sums_tibble <- tibble(
tibble_name = names(nll_sums),
nll_sum = nll_sums
) %>%
separate(tibble_name, into = c("s_prefix", "s", "sens_prefix", "sens"), sep = "_") %>%
select(s, sens, nll_sum) %>%
mutate(s = as.factor(s),
sens = as.factor(sens))
View(nll_sums_tibble)
max(nll_sums_tibble$nll_sum)
nll_sums_tibble2 <- nll_sums_tibble %>%
filter(nll_sum!=c(0,NA,NaN,Inf,-Inf))
nll_sums_tibble2 <- nll_sums_tibble %>%
filter(nll_sum!=c(0,NA,NaN,'Inf','-Inf'))
View(nll_sums_tibble2)
p2 <- ggplot(nll_sums_tibble, aes(x = s, y = sens, fill = nll_sum)) +
geom_tile(width = 0.9, height = 0.9) +
geom_text(data = nll_sums_tibble %>%
mutate(row_id = row_number()) %>%
filter(row_id %% 5 == 0),
aes(label = round(nll_sum, 2)),
color = "white", size = 3) +
scale_fill_viridis_c(option = "plasma") +
theme_minimal() +
labs(title = "Heatmap of 'nll' Sums",
x = "s",
y = "sens",
fill = "Sum of nll") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_fixed(ratio = 1)
p2
max_nll <- nll_sums_tibble %>%
filter(is.finite(nll_sum)) %>%
slice_max(nll_sum, n = 1)
View(max_nll)
View(test)
View(test)
View(nll_sums_tibble)
combNorm3_processed <- lapply(combNorm3, function(tbl) {
tbl %>%
group_by(vartype) %>%
mutate(normalized_nll = nll / sum(nll)) %>%
summarise(sum_normalized_nll = sum(normalized_nll),
.groups = "drop")
})
combNorm3_processed <- lapply(combNorm3, function(tbl) {
tbl %>%
group_by(vartype) %>%
mutate(normalized_nll = nll / sum(nll))
})
combNorm3_processed[[1]]
test <- combNorm3_processed[[1]]
View(test)
combNorm3_processed <- lapply(combNorm3, function(tbl) {
tbl %>%
group_by(vartype) %>%
summarise(sum_nll = sum(nll, na.rm = TRUE),
.groups = "drop")
})
# Then test
test <- combNorm3_processed[[1]]
View(test)
test <- combNorm3[[1]]
View(test)
combNorm3_processed <- lapply(combNorm3, function(tbl) {
tbl %>%
group_by(trialtype, vartype) %>%
summarise(sum_nll = sum(nll, na.rm = TRUE),
.groups = "drop")
})
# Then test
test <- combNorm3_processed[[1]]
View(test)
# Then test
test <- combNorm3_processed[[200]]
View(test)
index <- which(sapply(combNorm3, function(tbl)
any(tbl$s == 0.7 & tbl$sens == 1)))
forT <- combNorm3_processed[[index]]
View(forT)
nllfull <- combNorm2 %>% mutate(nll = log(cesm)*n)
temp1 <- nllfull %>% filter(cesm!=c(0,NA,NaN))
newnllfull <- sum(temp1$nll)
nllfull <- combNorm2 %>% filter(s==0.7, sens==0.5) %>%
mutate(nll = log(cesm)*n)
temp1 <- nllfull %>% filter(cesm!=c(0,NA,NaN))
newnllfull <- sum(temp1$nll)
log(1/8)*3408
log(0.25)*568+log(0.5)*2840
?print.xtable
# Load functions: world_combos, get_cond_probs, get_dd, get_cfs
source('functions.R')
dfd <- world_combos(params = c(1,1,1,1), structure = 'disjunctive')
View(world_combos)
load('../model_data/params.rdata', verbose = T) # defined in script `set_params.r`
i º1
i <- 1
# 1) Get possible world combos of two observed variables in both dis and conj structures
dfd <- world_combos(params = poss_params[[i]], structure = 'disjunctive')
View(dfd)
dfd <- dfd[,1:5]
View(dfd)
library(xtable)
print(xtable(dfd, type = "latex"), file = "dfd.tex")
dfd <- t(dfd)
View(dfd)
print(xtable(dfd, type = "latex"), file = "dfd.tex")
?xtable
print(xtable(dfd, type = "latex", display = 'd'), file = "dfd.tex")
print(xtable(dfd, type = "latex", digits = 0), file = "dfd.tex")
View(dfd)
t(dfd)
View(dataNorm)
View(combNorm)
View(combNorm2)
View(USArrests)
# Save one tibble out the list as a test to see its structure
test <- combNorm3[[10]]
View(test)
all <- read.csv('../model_data/alldd.csv') %>% replace(is.na(.), 0) # 64 obs for 16 4-var combinations x 2 (c,d) x 4 pgroups
View(all)
all <- all %>% rename(A_cp = 2, Au_cp = 3, B_cp = 4, Bu_cp = 5)
all$pgroup <- as.factor(all$pgroup)
all$trialtype <- all$group
all$trialtype[all$trialtype==1 & all$structure=='disjunctive'] <- 'd1'
all$trialtype[all$trialtype==2 & all$structure=='disjunctive'] <- 'd2'
all$trialtype[all$trialtype==3 & all$structure=='disjunctive'] <- 'd3'
all$trialtype[all$trialtype==4 & all$structure=='disjunctive'] <- 'd4'
all$trialtype[all$trialtype==5 & all$structure=='disjunctive'] <- 'd5'
all$trialtype[all$trialtype==6 & all$structure=='disjunctive'] <- 'd6'
all$trialtype[all$trialtype==7 & all$structure=='disjunctive'] <- 'd7'
all$trialtype[all$trialtype==1 & all$structure=='conjunctive'] <- 'c1'
all$trialtype[all$trialtype==2 & all$structure=='conjunctive'] <- 'c2'
all$trialtype[all$trialtype==3 & all$structure=='conjunctive'] <- 'c3'
all$trialtype[all$trialtype==4 & all$structure=='conjunctive'] <- 'c4'
all$trialtype[all$trialtype==5 & all$structure=='conjunctive'] <- 'c5'
all$grp <- all$group
all$grp[all$grp=='1'] <- 'A=0, B=0, | E=0'
all$grp[all$grp=='2'] <- 'A=0, B=1, | E=0'
all$grp[all$grp=='3' & all$structure=='disjunctive'] <- 'A=0, B=1, | E=1'
all$grp[all$grp=='3' & all$structure=='conjunctive'] <- 'A=1, B=0, | E=0'
all$grp[all$grp=='4' & all$structure=='disjunctive'] <- 'A=1, B=0, | E=0'
all$grp[all$grp=='4' & all$structure=='conjunctive'] <- 'A=1, B=1, | E=0'
all$grp[all$grp=='5' & all$structure=='disjunctive'] <- 'A=1, B=0, | E=1'
all$grp[all$grp=='5' & all$structure=='conjunctive'] <- 'A=1, B=1, | E=1'
all$grp[all$grp=='6'] <- 'A=1, B=1, | E=0'
all$grp[all$grp=='7'] <- 'A=1, B=1, | E=1'
# We can also add a column called isLat for just whether the node is latent (Au,Bu) or observed (A,B).
all <- all %>% mutate(isLat = if_else(grepl(c("^Au|^Bu"), node), 'TRUE', 'FALSE'))
all$realLat <- all$isLat
all$realLat[all$trialtype=='c5'|all$trialtype=='d6'] <- FALSE
all$realLat[all$trialtype=='d2' & all$node2=='Bu'] <- FALSE
all$realLat[all$trialtype=='d3' & all$node2=='Bu'] <- FALSE
all$realLat[all$trialtype=='d4' & all$node2=='Au'] <- FALSE
all$realLat[all$trialtype=='d5' & all$node2=='Au'] <- FALSE
# write this as csv in case need it later
write.csv(all, '../model_data/tidied_predsdd.csv')
View(all)
View(test)
View(modelNorm)
mpdd <- all
mp$pgroup <- as.factor(mp$pgroup)
mpdd$pgroup <- as.factor(mp$pgroup)
View(mpdd)
mpdd$node <- as.factor(mpdd$node)
mpdd$trialtype <- as.factor(mpdd$trialtype)
mpdd$structure <- as.factor(mpdd$structure)
mpdd$E <- as.factor(mpdd$E)
# Note, these are similar to the modelNorm etc in 'combine_per_s' but these have to split out the s separately
modelNormdd <- mpdd %>%  # 96768 of 8
group_by(pgroup, trialtype, world, Cause, node) %>% # guess it's ok to not have .drop=F
summarise(n = n()) #%>%  # take the mean of the 10 model runs
View(modelNormdd)
# Note, these are similar to the modelNorm etc in 'combine_per_s' but these have to split out the s separately
modelNormdd <- mpdd %>%  # 96768 of 8
group_by(pgroup, trialtype, node, Cause) %>% # guess it's ok to not have .drop=F
summarise(n = n()) #%>%  # take the mean of the 10 model runs
View(modelNormdd)
# Note, these are similar to the modelNorm etc in 'combine_per_s' but these have to split out the s separately
modelNormdd <- mpdd %>%  # 96768 of 8
group_by(pgroup, trialtype, node, Cause==T) %>% # guess it's ok to not have .drop=F
summarise(n = n()) #%>%  # take the mean of the 10 model runs
View(modelNormdd)
# Note, these are similar to the modelNorm etc in 'combine_per_s' but these have to split out the s separately
modelNormdd <- mpdd %>%  # 96768 of 8
group_by(pgroup, trialtype, node, Cause) %>% # guess it's ok to not have .drop=F
summarise(n = n(Cause==TRUE)) #%>%  # take the mean of the 10 model runs
# Note, these are similar to the modelNorm etc in 'combine_per_s' but these have to split out the s separately
modelNormdd <- mpdd %>%  # 96768 of 8
group_by(pgroup, trialtype, node, Cause) %>% # guess it's ok to not have .drop=F
summarise(n = n()) %>%
filter(Cause==TRUE)# take the mean of the 10 model runs
View(modelNormdd)
# Note, these are similar to the modelNorm etc in 'combine_per_s' but these have to split out the s separately
modelNormdd <- mpdd %>%  # 96768 of 8
group_by(pgroup, trialtype, node, Cause) %>% # guess it's ok to not have .drop=F
summarise(n = n()) %>%
filter(pgroup==1, Cause==TRUE)# take the mean of the 10 model runs
View(modelNormdd)
View(dataNorm)
